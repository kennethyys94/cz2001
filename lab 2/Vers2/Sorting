public class Sorting {
	public static int SIZE;
	public int[] array;
	
	public Sorting() {
		array = new int[SIZE];
	}
	
	//For key comparisons
	private static long numOfKeyComparisons = 0;
	public void printKeyComparisons() {
		System.out.println("Number of Key Comparisions: " + numOfKeyComparisons);
	}
	public void resetKeyComparisons() {
		numOfKeyComparisons = 0;
	}
	
	//For CPU time in nanoseconds
	private static long cpuTime = 0;
	public void printCPUTime() {
		System.out.println("CPU Time: " + cpuTime);
	}
	public void resetCPUTime() {
		cpuTime = 0;
	}
	
	public void resultRun(int option, boolean isMerge) {
		array = new int[SIZE];
		resetKeyComparisons();
		resetCPUTime();
		generateData(option);
		// Create copy
		int[] original = new int[SIZE];
		for (int i = 0; i < SIZE; i ++) {
			original[i] = array[i];
		}
		// To get a reliable data set
		// switch to 1 for insertion sort option 2 or 3 as it is very slow
		int numOfSort = 10;
		for (int j = 0; j < numOfSort; j ++) {
			if (isMerge)
				mergeMethod(0,(SIZE-1));
			else 
				insertionMethod(SIZE);
			// replace array with original
			for (int x = 0; x < SIZE; x ++) {
				array[x] = original[x];
			}
		}
		numOfKeyComparisons /= numOfSort;
		cpuTime /= numOfSort;		
	}
	
	public void printArray() {
		for (int i = 0; i < SIZE; i ++) {
			System.out.print(array[i] +" ");
		}
		System.out.println();
	}
	
	
	// Data generator
	public void generateData(int generateInput) {
		switch (generateInput) {
			case 1:
				for (int i = 0; i < SIZE; i ++) {
					int value = (int)(Math.random()*((SIZE-1)+1))+1;
					array[i] = value;
				}
				break;
			case 2:
				for (int i =0; i < SIZE; i ++) {
					array[i] = i + 1;
				}
				break;
			case 3: 
				for (int i=0; i < SIZE; i ++) {
					array[i] = SIZE-i; 
				}
				break;
		}
	}
	
	// Merge Sort
	public void mergeMethod(int first, int last) {
		long startTime = System.nanoTime();
		if (first < last) {
			int middle = (first+last)/2;
			mergeMethod(first, middle);
			mergeMethod(middle+1,last);
			merge(first,last);
		}
		cpuTime += System.nanoTime() - startTime;
	}
	
	public void merge(int l, int r) {
		int m = (l+r)/2;
		int n1 = m - l + 1;
		int n2 = r - m;
		
		// Insert data to temp arrays
		int[] temp1 = new int[n1];
		int[] temp2 = new int[n2];
		
		for (int i = 0; i<n1; i++) {
			temp1[i] = array[l+i];
		}
		for (int j = 0; j <n2; j++) {
			temp2[j] = array[m+1+j];
		}
		
		// Merge the temp arrays
		int i = 0;
		int j = 0;
		int k = l;
		
		while (i < n1 && j < n2 ) {
			numOfKeyComparisons++;
			if (temp1[i] < temp2[j]) {
				array[k] = temp1[i];
				i++;
				k++;
			}
			else if (temp1[i] > temp2[j]) {
				array[k] = temp2[j];
				j ++;
				k ++;
			}
			else {
				array[k] = temp1[i];
				array[k+1] = temp2[j];
				i++;j++;k+=2;
			}
		}
		
		// If one is empty only
		while (i< n1) {
			array[k] = temp1[i];
			i++;k++;
		}
		while (j<n2) {
			array[k] = temp2[j];
			j++;k++;
		}
	}
	
	
	// Insertion Sort
	public void insertionMethod(int n) {
		long startTime = System.nanoTime();
		for(int i = 1; i<n; i++) {
			for(int j=i; j>0; j--) {
				numOfKeyComparisons++;
				if(array[j] < array[j-1]) {
					//Swap function
	        			int temp = array[j];
	        			array[j] = array[j-1];
	        			array[j-1] = temp;
				}
	        	else break;		
	        }
		}
		cpuTime += System.nanoTime() - startTime;
	} 
}
